public class SLLSizeBenchmarks extends java.lang.Object
{
/*SLLSizeBenchmarks.java*/

/*[Ljava.lang.String;@f5b6a4d*/
    private static final void error(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 14 eline: 14 spos: 28 epos: 41 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 14 eline: 14 spos: 28 epos: 41 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@4aba553d*/
    public static void analysisInitAcyclic(SLLSizeBenchmarks$Node)
    {
        SLLSizeBenchmarks$Node x;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 25 eline: 25 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 25 eline: 25 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@424282b3*/
    public static void analysisInitAllNulls()
    {
        return;
/*Source Line Pos Tag: sline: 33 eline: 34 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@3e49aa7*/
    public static void analysisAssertNotNull(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 40 eline: 40 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/

        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 40 eline: 40 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 40 eline: 40 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@57a62ea9*/
    public static void analysisAssertReachable(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 45 epos: 50 file: SLLSizeBenchmarks.java*/

        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 53 epos: 58 file: SLLSizeBenchmarks.java*/

        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@4f2d8add*/
    public static void analysisAssertDisjoint(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 44 epos: 49 file: SLLSizeBenchmarks.java*/

        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 52 epos: 57 file: SLLSizeBenchmarks.java*/

        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@19acde91*/
    public static void analysisAssertAcyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/

        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@3e3a4ea1*/
    public static void analysisAssertCyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 73 eline: 73 spos: 42 epos: 47 file: SLLSizeBenchmarks.java*/

        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 73 eline: 73 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 73 eline: 73 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@588feca9*/
    public static void analysisAssertNoGarbage(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 84 eline: 84 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 84 eline: 84 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@7b57ee07*/
    public static void analysisLengthDiff(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, int, java.lang.String)
    {
        SLLSizeBenchmarks$Node list1, list2;
        int diff;
        java.lang.String message;

        list1 := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 40 epos: 49 file: SLLSizeBenchmarks.java*/

        list2 := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 52 epos: 61 file: SLLSizeBenchmarks.java*/

        diff := @parameter2: int;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 64 epos: 71 file: SLLSizeBenchmarks.java*/

        message := @parameter3: java.lang.String;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@470efaa*/
    public SLLSizeBenchmarks$Node createAndPrint(int)
    {
        SLLSizeBenchmarks this;
        int size;
        SLLSizeBenchmarks$Node temp$0, temp$1, temp$2, temp$3, temp$4, temp$5;

        this := @this: SLLSizeBenchmarks;
/*Source Line Pos Tag: sline: 128 eline: 143 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
/*V[1] = V[0] // this := @this: SLLSizeBenchmarks*/
/*V[1] : true*/
/*V[0] = true // this := @this: SLLSizeBenchmarks*/
/*V[0] : true*/

        size := @parameter0: int;
/*Source Line Pos Tag: sline: 128 eline: 128 spos: 29 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[2] = V[1] // size := @parameter0: int*/
/*V[2] : true*/

        temp$0 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 4 epos: 27 file: SLLSizeBenchmarks.java*/
/*V[3] = V[2] // temp$0 = new SLLSizeBenchmarks$Node*/
/*V[3] : true*/

        specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 17 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[4] = V[3] // specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[4] : true*/

        temp$1 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 4 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[5] = V[4] // temp$1 = new SLLSizeBenchmarks$Node*/
/*V[5] : true*/

        specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 16 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[6] = V[5] // specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[6] : true*/

        temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1;
/*Source Line Pos Tag: sline: 133 eline: 133 spos: 10 epos: 13 file: SLLSizeBenchmarks.java*/
/*V[7] = V[6] // temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1*/
/*V[7] : true*/

        temp$2 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 135 eline: 135 spos: 4 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[8] = V[7] // temp$2 = new SLLSizeBenchmarks$Node*/
/*V[8] : true*/

        specialinvoke temp$2.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 135 eline: 135 spos: 16 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[9] = V[8] // specialinvoke temp$2.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[9] : true*/

        temp$3 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 136 eline: 136 spos: 4 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[10] = V[9] // temp$3 = new SLLSizeBenchmarks$Node*/
/*V[10] : true*/

        specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 136 eline: 136 spos: 16 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[11] = V[10] // specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[11] : true*/

        temp$4 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 137 eline: 137 spos: 4 epos: 27 file: SLLSizeBenchmarks.java*/
/*V[12] = V[11] // temp$4 = new SLLSizeBenchmarks$Node*/
/*V[12] : true*/

        specialinvoke temp$4.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 137 eline: 137 spos: 17 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[13] = V[12] // specialinvoke temp$4.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[13] : true*/

        temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$2;
/*Source Line Pos Tag: sline: 138 eline: 138 spos: 10 epos: 13 file: SLLSizeBenchmarks.java*/
/*V[14] = V[13] // temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$2*/
/*V[14] : true*/

        temp$5 = temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 139 eline: 139 spos: 4 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[15] = AssignNextToLocalTransformer(V[14]) // temp$5 = temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[15] : false*/

        temp$5.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3;
/*Source Line Pos Tag: sline: 139 eline: 139 spos: 15 epos: 18 file: SLLSizeBenchmarks.java*/
/*V[16] = V[15] // temp$5.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3*/
/*V[16] : false*/

        staticinvoke <SLLSizeBenchmarks: void analysisLengthDiff(SLLSizeBenchmarks$Node,SLLSizeBenchmarks$Node,int,java.lang.String)>(temp$0, temp$4, 0, "Unable to assert size difference!");
/*Source Line Pos Tag: sline: 141 eline: 141 spos: 4 epos: 76 file: SLLSizeBenchmarks.java*/
/*V[17] = AnalysisLengthDiffTransformer(V[16]) // staticinvoke <SLLSizeBenchmarks: void analysisLengthDiff(SLLSizeBenchmarks$Node,SLLSizeBenchmarks$Node,int,java.lang.String)>(temp$0, temp$4, 0, "Unable to assert size difference!")*/
/*V[17] : false*/

        return temp$0;
/*Source Line Pos Tag: sline: 142 eline: 142 spos: 4 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[18] = V[17] // return temp$0*/
/*V[18] : false*/
    }

/*[Ljava.lang.String;@45ebce12*/
/*8*/
    public void <init>()
    {
        SLLSizeBenchmarks this;

        this := @this: SLLSizeBenchmarks;
/*9*/

        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/

        return;
/*9*/
    }
}
