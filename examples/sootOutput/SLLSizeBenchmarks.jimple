public class SLLSizeBenchmarks extends java.lang.Object
{
/*SLLSizeBenchmarks.java*/

/*[Ljava.lang.String;@538bcc31*/
    private static final void error(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 14 eline: 14 spos: 28 epos: 41 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 14 eline: 14 spos: 28 epos: 41 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@a5844c3*/
    public static void analysisInitAcyclic(SLLSizeBenchmarks$Node)
    {
        SLLSizeBenchmarks$Node x;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 25 eline: 25 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 25 eline: 25 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@28eca1c7*/
    public static void analysisInitAllNulls()
    {
        return;
/*Source Line Pos Tag: sline: 33 eline: 34 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@30af8c02*/
    public static void analysisAssertNotNull(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 40 eline: 40 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/

        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 40 eline: 40 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 40 eline: 40 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@75b4f091*/
    public static void analysisAssertReachable(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 45 epos: 50 file: SLLSizeBenchmarks.java*/

        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 53 epos: 58 file: SLLSizeBenchmarks.java*/

        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 49 eline: 49 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@3d82ccb8*/
    public static void analysisAssertDisjoint(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 44 epos: 49 file: SLLSizeBenchmarks.java*/

        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 52 epos: 57 file: SLLSizeBenchmarks.java*/

        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 57 eline: 57 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@702da056*/
    public static void analysisAssertAcyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/

        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@3c2eedcd*/
    public static void analysisAssertCyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 73 eline: 73 spos: 42 epos: 47 file: SLLSizeBenchmarks.java*/

        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 73 eline: 73 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 73 eline: 73 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@6e4ca2a1*/
    public static void analysisAssertNoGarbage(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 84 eline: 84 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 84 eline: 84 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@450044dc*/
    public static void analysisLengthDiff(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, int, java.lang.String)
    {
        SLLSizeBenchmarks$Node list1, list2;
        int diff;
        java.lang.String message;

        list1 := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 40 epos: 49 file: SLLSizeBenchmarks.java*/

        list2 := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 52 epos: 61 file: SLLSizeBenchmarks.java*/

        diff := @parameter2: int;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 64 epos: 71 file: SLLSizeBenchmarks.java*/

        message := @parameter3: java.lang.String;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/

        return;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/
    }

/*[Ljava.lang.String;@58b2633a*/
    public void createAndPrintSmall()
    {
        SLLSizeBenchmarks this;
        SLLSizeBenchmarks$Node temp$0, temp$1, temp$2, temp$3, temp$4;

        this := @this: SLLSizeBenchmarks;
/*Source Line Pos Tag: sline: 182 eline: 200 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
/*V[1] = V[0] // this := @this: SLLSizeBenchmarks*/
/*V[1] : true*/
/*V[0] = true // this := @this: SLLSizeBenchmarks*/
/*V[0] : true*/

        staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>();
/*Source Line Pos Tag: sline: 184 eline: 184 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[2] = InitAllNullsTransformer(V[1]) // staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>()*/
/*V[2] : graph = {temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=null}*/

        temp$0 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 185 eline: 185 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[3] = AssignNewExprToLocalTransformer(V[2]) // temp$0 = new SLLSizeBenchmarks$Node*/
/*V[3] : graph = {temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, n0~[temp$0]~>null}*/

        specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 185 eline: 185 spos: 15 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[4] = V[3] // specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[4] : graph = {temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, n0~[temp$0]~>null}*/

        temp$1 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 186 eline: 186 spos: 3 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[5] = AssignNewExprToLocalTransformer(V[4]) // temp$1 = new SLLSizeBenchmarks$Node*/
/*V[5] : graph = {temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, n0~[temp$0]~>null, n1~[temp$1]~>null}*/

        specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 186 eline: 186 spos: 16 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[6] = V[5] // specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[6] : graph = {temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, n0~[temp$0]~>null, n1~[temp$1]~>null}*/

        temp$2 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 187 eline: 187 spos: 3 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[7] = AssignNewExprToLocalTransformer(V[6]) // temp$2 = new SLLSizeBenchmarks$Node*/
/*V[7] : graph = {temp$4=null, temp$3=null, temp$2=n2, temp$1=n1, temp$0=n0, n0~[temp$0]~>null, n1~[temp$1]~>null, n2~[temp$2]~>null}*/

        specialinvoke temp$2.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 187 eline: 187 spos: 16 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[8] = V[7] // specialinvoke temp$2.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[8] : graph = {temp$4=null, temp$3=null, temp$2=n2, temp$1=n1, temp$0=n0, n0~[temp$0]~>null, n1~[temp$1]~>null, n2~[temp$2]~>null}*/

        temp$3 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 188 eline: 188 spos: 3 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[9] = AssignNewExprToLocalTransformer(V[8]) // temp$3 = new SLLSizeBenchmarks$Node*/
/*V[9] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0~[temp$0]~>null, n1~[temp$1]~>null, n2~[temp$2]~>null, n3~[temp$3]~>null}*/

        specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 188 eline: 188 spos: 16 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[10] = V[9] // specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[10] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0~[temp$0]~>null, n1~[temp$1]~>null, n2~[temp$2]~>null, n3~[temp$3]~>null}*/

        temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1;
/*Source Line Pos Tag: sline: 189 eline: 189 spos: 8 epos: 11 file: SLLSizeBenchmarks.java*/
/*V[11] = AssignLocalToNextFieldTransformer(V[10]) // temp$0.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1*/
/*V[11] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0.next=n1, n1~[temp$1]~>null, n2~[temp$2]~>null, n3~[temp$3]~>null}*/

        temp$1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$2;
/*Source Line Pos Tag: sline: 190 eline: 190 spos: 9 epos: 12 file: SLLSizeBenchmarks.java*/
/*V[12] = AssignLocalToNextFieldTransformer(V[11]) // temp$1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$2*/
/*V[12] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0.next=n1, n1~[loc_var1]~>n2, n2~[temp$2]~>null, n3~[temp$3]~>null}*/

        temp$2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3;
/*Source Line Pos Tag: sline: 191 eline: 191 spos: 9 epos: 12 file: SLLSizeBenchmarks.java*/
/*V[13] = AssignLocalToNextFieldTransformer(V[12]) // temp$2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3*/
/*V[13] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0.next=n1, n1~[loc_var1]~>n2, n2~[loc_var2]~>n3, n3~[temp$3]~>null}*/

        temp$4 = temp$3.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 193 eline: 193 spos: 3 epos: 17 file: SLLSizeBenchmarks.java*/
/*V[14] = AssignNextToLocalTransformer(V[13]) // temp$4 = temp$3.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[14] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0.next=n1, n1~[loc_var1]~>n2, n2~[loc_var2]~>n3, n3~[temp$3]~>null}*/

        if temp$4 != null goto label1;
/*Source Line Pos Tag: sline: 194 eline: 194 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[15] = !AssumeLocalEqNullTransformer(V[14]) // assume temp$4 != null*/
/*V[15] : false*/
/*V[16] = AssumeLocalEqNullTransformer(V[14]) // assume !(temp$4 != null)*/
/*V[16] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0.next=n1, n1~[loc_var1]~>n2, n2~[loc_var2]~>n3, n3~[temp$3]~>null}*/

        goto label2;
/*Source Line Pos Tag: sline: 194 eline: 194 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[17] = V[16] // goto [?= staticinvoke <SLLSizeBenchmarks: void error(java.lang.String)>("unexpected")]*/
/*V[17] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0.next=n1, n1~[loc_var1]~>n2, n2~[loc_var2]~>n3, n3~[temp$3]~>null}*/

     label1:
        staticinvoke <SLLSizeBenchmarks: void error(java.lang.String)>("unexpected");
/*Source Line Pos Tag: sline: 195 eline: 195 spos: 4 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[18] = AnalysisError(V[15]) // staticinvoke <SLLSizeBenchmarks: void error(java.lang.String)>("unexpected")*/
/*V[18] : false*/

     label2:
        staticinvoke <SLLSizeBenchmarks: void error(java.lang.String)>("unexpected");
/*Source Line Pos Tag: sline: 198 eline: 198 spos: 3 epos: 22 file: SLLSizeBenchmarks.java*/
/*V[20] = Join_SLLDomain(V[17], V[18]) // staticinvoke <SLLSizeBenchmarks: void error(java.lang.String)>("unexpected")*/
/*V[20] : graph = {temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, n0.next=n1, n1~[loc_var1]~>n2, n2~[loc_var2]~>n3, n3~[temp$3]~>null}*/
/*V[19] = AnalysisError(V[20]) // staticinvoke <SLLSizeBenchmarks: void error(java.lang.String)>("unexpected")*/
/*V[19] : false*/
/*Possible error!*/
/*Possible error!*/
/*Possible error!*/

        return;
/*Source Line Pos Tag: sline: 198 eline: 198 spos: 3 epos: 22 file: SLLSizeBenchmarks.java*/
/*V[21] = V[19] // return*/
/*V[21] : false*/
    }

/*[Ljava.lang.String;@53f5e147*/
/*8*/
    public void <init>()
    {
        SLLSizeBenchmarks this;

        this := @this: SLLSizeBenchmarks;
/*9*/

        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/

        return;
/*9*/
    }
}
